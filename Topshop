-- Anti-cheat event bypass script
local eventbypass

eventbypass = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()

    if not checkcaller() then
        if method == "FireServer" then
            local name = tonumber(self.Name)
            local parentName = tonumber(self.Parent.Name)
            
            if (name and name >= 1000 and name <= 9999) or self.Name == "7486" then
                print("Blocked remote call to:", self.Name, "in group:", self.Parent.Name)
                return wait(9e9)
            end

            if self.Name == "AC_Event" then
                print("AC_Event remote was called and blocked.")
                return wait(9e9)
            end
        end
    end

    return eventbypass(self, ...)
end)

-- Get the local player and disable specified scripts
local PlayersService = game:GetService("Players")
local player = PlayersService.LocalPlayer

if player then
    local playerScripts = player:FindFirstChild("PlayerScripts")
    
    if playerScripts then
        local acBackup = playerScripts:FindFirstChild("AC_Backup")
        local acPlayer = playerScripts:FindFirstChild("AC_Player")
        local playerControl = playerScripts:FindFirstChild("PlayerControl")

        if acBackup then
            acBackup.Disabled = true
            print("Disabled script:", acBackup:GetFullName())
        else
            warn("AC_Backup script not found.")
        end

        if acPlayer then
            acPlayer.Disabled = true
            print("Disabled script:", acPlayer:GetFullName())
        else
            warn("AC_Player script not found.")
        end

        if playerControl then
            playerControl.Disabled = true
            print("Disabled script:", playerControl:GetFullName())
        else
            warn("PlayerControl script not found.")
        end
    else
        warn("PlayerScripts not found in the player.")
    end
else
    warn("Local player not found.")
end

-- Detect and print all remotes within the specified range and the "7486" remote in ReplicatedStorage
local replicatedStorage = game:GetService("ReplicatedStorage")
local remotes = replicatedStorage:FindFirstChild("Remotes")

if remotes then
    local remote7486 = remotes:FindFirstChild("7486")
    if remote7486 then
        print("Found specific remote: 7486")
    end
    
    for i = 1000, 9999 do
        local remoteGroup = remotes:FindFirstChild(tostring(i))
        
        if remoteGroup then
            for j = 1000, 9999 do
                local specificRemote = remoteGroup:FindFirstChild(tostring(j))
                
                if specificRemote then
                    print("Found remote:", specificRemote.Name, "inside group:", remoteGroup.Name)
                end
            end
        end
    end
else
    print("No 'Remotes' folder found in ReplicatedStorage.")
end

print("Script execution completed.")
local username = game.Players.LocalPlayer.Name -- Get the local player's username

-- Function to check if the player has permission
local function hasPermission(playerName)
    -- Define the list of permitted usernames
    local permittedUsers = {
        "seliem779", -- Replace with actual usernames
        "1_ALsfaH",
        -- Add more usernames as needed
    }

    -- Check if the username is in the permittedUsers list
    for _, user in ipairs(permittedUsers) do
        if playerName == user then
            return true
        end
    end
    return false
end

-- Check if the local player has permission
if not hasPermission(username) then
    game.Players.LocalPlayer:Kick("تبي تهكر؟")
    return -- Exit the script if the player is kicked
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Top City",
    SubTitle = "By Ahmed",
    TabWidth = 100,
    Size = UDim2.fromOffset(320, 170),
    Acrylic = true,
    Theme = "Dark"
})

-- Tab for Kill Options
local Tab1 = Window:AddTab({ Title = "قتل تلقائي", Icon = "" })

-- Variable to store the target player's name
local playerName = ""

-- Textbox for entering the target player's username
Tab1:AddInput("Input", {
    Title = "",
    Default = "",
    Placeholder = "Enter username",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        playerName = Value  -- Update the playerName variable with user input
        print("Target set to: " .. playerName)
    end
})

-- Kill Button
Tab1:AddButton({
    Title = "قتل الاعب",
    Callback = function()
        local localPlayer = game.Players.LocalPlayer
        local weapon = localPlayer.Character:FindFirstChildOfClass("Tool")

        if weapon and playerName ~= "" then
            for i = 1, 4 do
                local targetPlayer = game.Players:FindFirstChild(playerName)

                if targetPlayer and targetPlayer.Character then
                    local args = {
                        [1] = weapon,
                        [2] = {
                            ["p"] = Vector3.new(635.4351806640625, 37.73330307006836, -783.640625),
                            ["pid"] = 1,
                            ["part"] = targetPlayer.Character.HumanoidRootPart,
                            ["d"] = 43.0,
                        }
                    }

                    game:GetService("ReplicatedStorage").WeaponsSystem.Network.WeaponHit:FireServer(unpack(args))
                else
                    print("Target player not found.")
                    break
                end
            end
        else
            print("Weapon not found or player name is empty.")
        end
    end
})

-- Kill Button 2
Tab1:AddButton({
    Title = "قتل الاعب2",
    Callback = function()
        local localPlayer = game.Players.LocalPlayer
        local weapon = localPlayer.Character:FindFirstChildOfClass("Tool")

        if weapon and playerName ~= "" then
            for i = 1, 1 do
                local targetPlayer = game.Players:FindFirstChild(playerName)

                if targetPlayer and targetPlayer.Character then
                    local args = {
                        [1] = weapon,
                        [2] = {
                            ["p"] = Vector3.new(635.4351806640625, 37.73330307006836, -783.640625),
                            ["pid"] = 1,
                            ["part"] = targetPlayer.Character.HumanoidRootPart,
                            ["d"] = 43.0,
                        }
                    }

                    game:GetService("ReplicatedStorage").WeaponsSystem.Network.WeaponHit:FireServer(unpack(args))
                else
                    print("Target player not found.")
                    break
                end
            end
        else
            print("Weapon not found or player name is empty.")
        end
    end
})

-- New Tab for Tree Options
local Tab2 = Window:AddTab({ Title = "التجميع", Icon = "" })

-- Max Button for Wine
Tab2:AddButton({
    Title = "العنب",
    Callback = function()
        local prompts = {
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[18].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[16].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[9].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[15].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[14].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[13].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[12].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[11].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[8].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[17].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[10].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[4].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[5].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[6].Prompt,
            workspace.MyScripts.WorldMats.WineFarm:GetChildren()[7].Prompt,
            workspace.MyScripts.WorldMats.WineFarm.GraphTree.Prompt,
        }

        for _, prompt in ipairs(prompts) do
            prompt.HoldDuration = 0
            prompt.Exclusivity = Enum.ProximityPromptExclusivity.AlwaysShow
        end

        -- Set MaxActivationDistance for each prompt
        local maxActivationDistance = 10000
        for _, child in ipairs(workspace.MyScripts.WorldMats.WineFarm:GetChildren()) do
            local prompt = child:FindFirstChildOfClass("ProximityPrompt")
            if prompt then
                prompt.MaxActivationDistance = maxActivationDistance
                prompt.Exclusivity = Enum.ProximityPromptExclusivity.AlwaysShow
            end
        end

        print("All tree prompts have been updated.")
    end
})

-- New Button for Stones
Tab2:AddButton({
    Title = "تجميع الصخر",
    Callback = function()
        local stones = workspace.MyScripts.WorldMats.Stones

        -- Loop through indices 0 to 100
        for index = 0, 100 do
            local child = stones:GetChildren()[index + 1]  -- +1 for 1-based indexing
            if child and child:FindFirstChild("Prompt") then
                local proximityPrompt = child.Prompt:FindFirstChildOfClass("ProximityPrompt")
                if proximityPrompt then
                    proximityPrompt.HoldDuration = 0
                    proximityPrompt.Exclusivity = Enum.ProximityPromptExclusivity.AlwaysShow
                    proximityPrompt.MaxActivationDistance = 10000
                end
            end
        end

        print("All stone prompts have been updated.")
    end
})

Fluent:Notify({
    Title = "السكربت",
    Content = "The script has been loaded.",
    Duration = 5
})

